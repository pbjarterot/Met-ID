name: 'publish'
on:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest] #[macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.1 javascriptcoregtk-4.1 libsoup-3.0 glib-2.0 gobject-2.0 gio-2.0 libglib2.0-dev pkg-config libgtk-3-dev libappindicator3-dev librsvg2-dev patchelf protobuf-compiler

          npm install @types/jquery --save-dev

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'  # Specify the Python version
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install grpcio
          pip install grpcio_tools
          pip install protobuf
          pip install rdkit

      - name: Install proto
        run: |
          python -m grpc_tools.protoc -I add_to_db --python_out=. --pyi_out=. --grpc_python_out=. protos/streaming.proto
        working-directory: met-id/src-tauri/src

      - name: Use Pyinstaller (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          ./make_executables.ps1
        working-directory: met-id/src-tauri/pyinstaller
        shell: pwsh

      - name: Use Pyinstaller (MacOS)
        if: matrix.platform == 'macos-latest'
        run: |
          chmod +x make_macos_executables.sh
          ./make_macos_executables.sh
        working-directory: met-id/src-tauri/pyinstaller
        shell: bash

      - name: Use Pyinstaller (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          chmod +x make_linux_executables.sh
          ./make_linux_executables.sh
        working-directory: met-id/src-tauri/pyinstaller
        shell: bash

      - name: Install rdkit (MacOS)
        if: matrix.platform == 'macos-latest' || matrix.platform == 'ubuntu-latest'
        run: |
          brew install rdkit

          


      - name: Upload Bin
        run: |
          # Add your upload commands here

      - name: Install Frontend Dependencies
        run: npm install # change this to npm or pnpm depending on which one you use
        working-directory: met-id

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          tagName: Met-ID-v0.3.0 # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: 'Met-ID v0.3.0'
          releaseBody: 'See the assets to download this version and install.'
          projectPath: ./met-id
          releaseDraft: false
          prerelease: false
